import os
import random
import csv
from io import StringIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# ржЗржЙржЬрж╛рж░ ржбрж╛ржЯрж╛ рж╕рзНржЯрзЛрж░рзЗржЬ
user_numbers = {}
user_gmails = {}

# /start ржХржорж╛ржирзНржб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "ЁЯМ╕ ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ЁЯМ╕\n"
        "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж┐ рззрзжрзж ржирж╛ржорзНржмрж╛рж░ ржмрж╛ ЁЯУм Gmail ржжрж┐рждрзЗ ржкрж╛рж░рзЗржи ?\n\n"
        "ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░ ржжрж┐рж▓рзЗ тЮХ ржмрж╛ ЁЯФЧ ржмрж╛ржЯржи ржЖрж╕ржмрзЗ\n"
        "ЁЯУм Gmail ржжрж┐рж▓рзЗ ЁЯУз ржмрж╛ржЯржи ржЖрж╕ржмрзЗ\n\n"
        "тЬЕ ржПржХрж╕рж╛ржерзЗ рззрзжрзж ржЯрж┐ ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржиЁЯШО"
    )
    await update.message.reply_text(welcome_text)

# /count ржХржорж╛ржирзНржб
async def count_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    num_count = len(user_numbers.get(user_id, []))
    gmail_count = 1 if user_gmails.get(user_id) else 0
    await update.message.reply_text(
        f"ржЖржкржирж┐ {num_count} ржирж╛ржорзНржмрж╛рж░ ржЗржиржкрзБржЯ ржжрж┐рзЯрзЗржЫрзЗржи ржПржмржВ {gmail_count} Gmail ржЗржиржкрзБржЯ ржжрж┐рзЯрзЗржЫрзЗржиред"
    )

# ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржиржкрзБржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if "@" in text:  # Gmail ржЗржиржкрзБржЯ
        user_gmails[user_id] = text
        await update.message.reply_text("тЬЕ ржЖржкржирж┐ Gmail ржЗржиржкрзБржЯ ржжрж┐рзЯрзЗржЫрзЗржиред")

        keyboard = [
            [InlineKeyboardButton("ЁЯУз Gmail Variations", callback_data="gmail")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржи ржерзЗржХрзЗ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:", reply_markup=reply_markup)

    else:  # ржирж╛ржорзНржмрж╛рж░ ржЗржиржкрзБржЯ
        numbers = [int(num) for num in text.replace(',', ' ').split() if num.isdigit()]
        if not numbers:
            await update.message.reply_text("тЭМ рж╕ржарж┐ржХ ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржиред")
            return

        # ржирждрзБржи ржирж╛ржорзНржмрж╛рж░ ржжрж┐рж▓рзЗ ржЖржЧрзЗрж░ржЧрзБрж▓рж╛ clear рж╣рзЯрзЗ рж╢рзБржзрзБ ржирждрзБржи ржЗржиржкрзБржЯ рж╕рзЗржн рж╣ржмрзЗ
        user_numbers[user_id] = numbers  

        num_count = len(numbers)
        await update.message.reply_text(f"тЬЕ ржЖржкржирж┐ {num_count} ржирж╛ржорзНржмрж╛рж░ ржжрж┐рзЯрзЗржЫрзЗржиред")

        keyboard = [
            [InlineKeyboardButton("тЮХ Add Plus", callback_data="plus_all")],
            [InlineKeyboardButton("ЁЯФЧ Telegram Link", callback_data="link_all")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржи ржерзЗржХрзЗ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:", reply_markup=reply_markup)

# ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "plus_all":
        numbers = user_numbers.get(user_id, [])
        if not numbers:
            await query.edit_message_text("ржХрзЛржирзЛ ржирж╛ржорзНржмрж╛рж░ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
            return
        sorted_numbers = sorted(numbers)
        result = "\n".join([f"+{num}" for num in sorted_numbers])
        await query.edit_message_text("тЮХ ржирж╛ржорзНржмрж╛рж░рж╕ржорзВрж╣:\n" + result)

    elif query.data == "link_all":
        numbers = user_numbers.get(user_id, [])
        if not numbers:
            await query.edit_message_text("ржХрзЛржирзЛ ржирж╛ржорзНржмрж╛рж░ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
            return
        result = "\n".join([f"https://t.me/+{num}" for num in numbers])
        await query.edit_message_text("ржирж╛ржорзНржмрж╛рж░ржЧрзБрж▓рзЛрж░ Telegram Link:\n" + result)

    elif query.data == "gmail":
        gmail = user_gmails.get(user_id)
        if not gmail:
            await query.edit_message_text("ржХрзЛржирзЛ Gmail ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
            return

        local_part, domain = gmail.split("@")
        letters = [c for c in local_part]

        variations = set()
        while len(variations) < 100:
            new_email = "".join([c.upper() if random.choice([True, False]) else c.lower() for c in letters])
            variations.add(new_email + "@" + domain)

        variations_list = list(variations)
        result_text = "\n".join(variations_list)
        await query.edit_message_text("ЁЯУз Gmail ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗрж╢ржирж╕ржорзВрж╣:\n" + result_text)

        # CSV ржлрж╛ржЗрж▓ рждрзИрж░рж┐
        output = StringIO()
        writer = csv.writer(output)
        writer.writerow(["Gmail Variations"])
        for email in variations_list:
            writer.writerow([email])
        output.seek(0)
        await context.bot.send_document(chat_id=user_id, document=output, filename="gmail_variations.csv")

# тЬЕ ржмржЯ ржЯрзЛржХрзЗржи Environment Variable ржерзЗржХрзЗ ржирзЗржмрзЗ
BOT_TOKEN = os.getenv("BOT_TOKEN")

# ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╕рзЗржЯржЖржк
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("count", count_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, input_handler))
app.add_handler(CallbackQueryHandler(button))

# ржмржЯ рж░рж╛ржи
app.run_polling()
